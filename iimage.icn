$ifndef _iimage_
############################################################################
#
#        File:     iimage.icn
#
#        Subject:  Procedures to produce inclusion fragments for Icon
#                  programs from structured data
#
#        Author:   Arthur C. Eschenlauer
#                  based on ximage.icn by Robert J. Alexander
#
#        Date:     September 8, 2021
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  iimage(x) : s
#    Produces three $ifdef sections necessary to reconstruct x (if possible).
#    iimage() differs from image() in that it outputs all elements of
#    structured data types.
#    The output should be Icon code accessible via
#    the $include preprocessor macro.
#    Additionally, it indents successive structural levels in such a way
#    that it is easy to visualize the data's structure.  Note that the
#    additional arguments in the iimage procedure declaration are used for
#    passing data among recursive levels.
#
#  idump(f, x1,x2,...,xn) : xn
#    Using iimage(), successively writes the images of x1, x2, ..., xn to
#    f if it specifies a file; otherwise, to &errout.
#
#
#  Example 1 - The following code:
#
#       # put values onto default list
#       t := table([])
#       put(t[], "foo", "bar")
#       t["baz"] := "fie"
#       t[["foe"]] := "fum"
#       write(iimage(t))
#
#  writes the following to &output (omitting error checking):
#
#       $ifdef IIMAGE_LOCAL
#       local T32
#       local L128
#       local L127
#       $endif # IIMAGE_LOCAL
#
#       $ifdef IIMAGE_DATA
#       T32 := table({
#           L127 := list(2)
#             L127[1] := "foo"
#             L127[2] := "bar"
#           L127
#         })
#         T32["baz"] := "fie"
#         T32[{
#           L128 := list(1)
#             L128[1] := "foe"
#           L128
#         }] := "fum"
#       $endif # IIMAGE_DATA
#
#
#  Example 2 - The following code:
#
#       t := table() ; t["one"] := 1 ; t["two"] := 2
#       idump(&output, "A table",t)
#
#  writes the following to &output (omitting error checking):
#
#       $ifdef IIMAGE_DATA
#       x10 := "A table"
#       $endif # IIMAGE_DATA
#
#       $ifdef IIMAGE_LOCAL
#       local T36
#       $endif # IIMAGE_LOCAL
#
#       $ifdef IIMAGE_DATA
#       T36 := table(&null)
#         T36["one"] := 1
#         T36["two"] := 2
#       $endif # IIMAGE_DATA
#
#
#  Example 3 - The following code:
#
#       idump(&output, "A list",[3,1,3,[2,4,6],3,4,3,5])
#
#  writes the following to &output (omitting error checking).
#  (Note that iimage() infers the predominant list element
#  value and avoids excessive output):
#
#       $ifdef IIMAGE_DATA
#       x11 := "A list"
#       $endif # IIMAGE_DATA
#
#       $ifdef IIMAGE_LOCAL
#       local L159
#       local L158
#       $endif # IIMAGE_LOCAL
#
#       $ifdef IIMAGE_DATA
#       L159 := list(8,3)
#         L159[2] := 1
#         L159[4] :=
#           L158 := list(3)
#             L158[1] := 2
#             L158[2] := 4
#             L158[3] := 6
#         L159[6] := 4
#         L159[8] := 5
#       $endif # IIMAGE_DATA
#
#
#  Example 4 - The following code:
#
#       # globally declared: record foo(bar, baz)
#       write(iimage(foo(7,"eleven")))
#
#  writes the following to &output (omitting error checking):
#
#       $ifdef IIMAGE_GLOBAL
#       record foo(bar,baz)
#       $endif # IIMAGE_GLOBAL
#
#       $ifdef IIMAGE_LOCAL
#       local R_foo_1
#       $endif # IIMAGE_LOCAL
#
#       $ifdef IIMAGE_DATA
#       R_foo_1 := foo()
#         R_foo_1.bar := 7
#         R_foo_1.baz := "eleven"
#       $endif # IIMAGE_DATA
#
############################################################################
#
#  Bugs:
#
#  - The code reveals structure primarily rather than ensuring that all
#    dependencies are met; consequently, it is possible to construct data
#    structures where elements may be referenced before they are
#    initialized, since indexes and default values can themselves be
#    structures.  For example, the "foo" record instance in the code below
#    is constructed at the wrong level, resulting in "R_foo_1 is null" when
#    the code is included elsewhere:
#
#      record foo(bar, baz)
#      # ...
#      procedure main()
#        ini := foo("bar","baz")
#        t := table(set(list(5,ini)))
#        t[list(3,["foo", "bing"])] := ini
#        write( iimage( t ) )
#      end
#
#    "Ordinary" data structures without circular references may not have
#    such problems.
#
############################################################################

$ifndef SPCS
$define SPCS "  "
$endif # SPCS
procedure iimage(x,indent,done)  #: string image of value x
  local i,j,s,ss,state,t,xtag,tp,sn,sz
  local gtag   # a single global declaration
  local ltag   # a single local declaration
  local gdecl  # global declarations
  local ldecl  # local declarations
  local outer  # not null for the outer (non-recursive) invocation
  local xrslt  # temporary result from recursive invocation
  local sclrasgn # a co-expression producing a sequence of labels
  local sclrcmmnt # a co-expression producing a sequence of labels

  static tr, name
  static sclrhlpr # a co-expression producing a sequence of labels

  initial {
    name := proc("name", 0)      # REG: in case name is a global
    sclrhlpr := create { i := 1; repeat ("x" || (i +:= 1)) @&source }
    }
  gdecl := ldecl := ""

  #
  #  done is &null (and state is set to &null) for the outer invocation.
  #   Do some required initialization.
  #
  if /(state := done)
    then {
      tr := &trace ; &trace := 0   # postpone tracing while in here
      outer := 1
      indent := ""
      done := table()
      #write("outer")
      }
    # else
    #   write("inner")
  sclrasgn := create repeat (if \outer then "\n" || @sclrhlpr || " := " else "") @ &main
  sclrcmmnt := create repeat (if \outer then "\n# " || @sclrhlpr || " := " else "") @ &main
  #
  #  Determine the type and process accordingly.
  #
  indent := (
       if indent == ""
         then "\n" # "\\n\n"
         else ""
     ) || indent || SPCS
  ss := ""
  tp := type(x)
  s := if xtag := \done[x] then "(\\" || xtag || " | stop(FILE_LINE,name(" || xtag || "),\" is null\"))" else case tp of {
    #
    #  Unstructured types just return their image().
    #
    "integer":
      @sclrasgn || x
    "null" | "cset" | "string" | "real":
      @sclrasgn || image(x)
    "window" | "co-expression" | "file" | "procedure" | "external":
      @sclrcmmnt || "\"(" || image(x) || ")\""
    #
    #  List.
    #
    "list": {
      image(x) ? {
        tab(6)
        sn := tab(find("("))
        sz := tab(0)
        }
      done[x] := xtag := "L" || sn
      ldecl ||:= "local " || xtag || "\n"
      #
      #  Figure out if there is a predominance of any object in the
      #  list.  If so, make it the default object.
      #
      t := table(0)
      every t[!x] +:= 1
      s := [,0]
      every t := !sort(t) do if s[2] < t[2] then s := t
      if s[2] > *x / 3 & s[2] > 2 then {
        s := s[1]
        t := (xrslt := iimage(s, indent || SPCS, done), gdecl ||:= pop(xrslt), ldecl ||:= pop(xrslt), pop(xrslt))
        if t ? (not any('\'"') & ss := tab(find(" :=")))
          then
            $ifndef DEBUG
            t := "{" || t || ( ss ? tab(upto('/'))||(move(1),"(\\")||(i:=tab(0))||" | stop(FILE_LINE,name(" || i || "),\" is null\"))" ) || indent || "}"
            $else
            t := "L{" || t || ( ss ? tab(upto('/'))||(move(1),"\\")||tab(0) ) || indent || "}"
            $endif # DEBUG
         # else
         #   t := "2(t," || t || ",t)"
      } else {
        s := t := &null
      }
      #
      #  Output the non-defaulted elements of the list.
      #
      ss := ""
      every i := 1 to *x do if x[i] ~=== s then {
        ss ||:= indent || "(\\" || xtag || " | stop(FILE_LINE,name(" || xtag || "),\" is null\"))[" || i || "] := " ||
            (xrslt := iimage(x[i],indent || SPCS,done), gdecl ||:= pop(xrslt), ldecl ||:= pop(xrslt), pop(xrslt))
        }
      s := tp || sz # "2(\"sz\"," || sz || ",\"sz\")"
      s[-1:-1] := "," || \t
      indent[1:-*SPCS] || "/" || xtag || " := " || s || ss
      }
    #
    #  Set.
    #
    "set": {
      image(x) ? {
        tab(5)
        sn := tab(find("("))
        }
      done[x] := xtag := "S" || sn
      ldecl ||:= "local " || xtag || "\n"
      every i := !sort(x) do {
        t := (xrslt := iimage(i,indent || SPCS,done), gdecl ||:= pop(xrslt), ldecl ||:= pop(xrslt), pop(xrslt))
        if t ? (not any('\'"') & s := tab(find(" :="))) then
            $ifndef DEBUG
            t := "{" || t || s || indent || "}"
            $else
            t := "S{" || t || s || indent || "}"
            $endif
        ss ||:= indent || "insert(" || "(\\" || xtag || " | stop(FILE_LINE,name(" || xtag || "),\" is null\"))," || t || ")"
        }
      indent[1:-*SPCS] || "/" || xtag || " := " || "set()" || ss
      }
    #
    #  Table.
    #
    "table": {
      image(x) ? {
        tab(7)
        sn := tab(find("("))
        }
      done[x] := xtag := "T" || sn
      ldecl ||:= "local " || xtag || "\n"
      #
      #  Output the table elements.  This is a bit tricky, since
      #  the subscripts might be structured, too.
      #
      every i := !sort(x) do {
        t := (xrslt := iimage(i[1],indent || SPCS,done), gdecl ||:= pop(xrslt), ldecl ||:= pop(xrslt), pop(xrslt))
        if t ? (not any('\'"') & s := tab(find(" :="))) then
            $ifndef DEBUG
            t := "{" || t || ( s ? tab(upto('/'))||(move(1),"(\\")||(j:=tab(0))||" | stop(FILE_LINE,name(" || j || "),\" is null\"))" )  || indent || "}"
            $else
            t := "Ts{" || t || ( s ? tab(upto('/'))||(move(1),"\\")||tab(0) ) || indent || "}"
            $endif
        ss ||:= indent || "(\\" || xtag || " | stop(FILE_LINE,name(" || xtag || "),\" is null\"))[" ||
            t || "] := " ||
            (xrslt := iimage(i[2],indent || SPCS,done), gdecl ||:= pop(xrslt), ldecl ||:= pop(xrslt), pop(xrslt))
        }
      #
      #  Output the table, including its default value (which might
      #  also be structured).
      #
      t := (xrslt := iimage(x[[]],indent || SPCS,done), gdecl ||:= pop(xrslt), ldecl ||:= pop(xrslt), pop(xrslt))
      if t ? (not any('\'"') & s := tab(find(" :="))) then
          $ifndef DEBUG
          t := "{" || t || ( s ? tab(upto('/'))||(move(1),"(\\")||(i:=tab(0))||" | stop(FILE_LINE,name(" || i || "),\" is null\"))" ) || indent || "}"
          $else
          t := "Td{" || t || ( s ? tab(upto('/'))||(move(1),"\\")||tab(0) ) || indent || "}"
          $endif
      indent[1:-*SPCS] || "/" || xtag || " := " || "table(" || t || ")" || ss
      #"\n" || xtag || " := " || "table(" || t || ")" || ss
      }
    #
    #  Record.
    #
    default: {
      image(x) ? {
        move(7)
        t := ""
        while t ||:= tab(find("_")) || move(1)
        t[-1] := ""
        sn := tab(find("("))
        }
      done[x] := xtag := "R_" || t ||  "_" || sn
      gtag := "record " || t || "("
      every i := 1 to *x do {
        name(x[i]) ? (tab(find(".")),sn := tab(0))
        ss ||:= indent || "(\\" || xtag || " | stop(FILE_LINE,name(" || xtag || "),\" is null\"))" || sn || " := " ||
            (xrslt := iimage(\x[i],indent,done), gtag ||:= pop(xrslt), ldecl ||:= pop(xrslt), pop(xrslt))
        gtag ||:= sn[2:0] || ","
        }
      gtag := gtag[1:-1]
      gtag ||:= ")\n"
      gdecl ||:= gtag
      ldecl ||:= "local " || xtag || "\n"
      indent[1:-*SPCS] || "/" || xtag || " := " || t || "()" || ss
      }
    }
  #
  #  If this is the outer invocation, clean up before returning.
  #
  if /state then {
    &trace := tr                # restore &trace
    }
  #
  #  Return the result.
  #
  return if \outer
           then
             ( if *gdecl + *ldecl + *s > 0
                 then "$ifndef FILE_LINE\n" ||
                      "$define FILE_LINE &file,\" line \",&line,\": \"\n" ||
                      "$endif # FILE_LINE\n"
                 else ""
             ) ||
             ( if *gdecl > 0
                 then "$ifdef IIMAGE_GLOBAL\n" ||
                       gdecl ||
                      "$endif # IIMAGE_GLOBAL\n\n"
                 else ""
             ) ||
             ( if *ldecl > 0
                 then "$ifdef IIMAGE_LOCAL\n" || ldecl ||
                      "$endif # IIMAGE_LOCAL\n\n"
                 else ""
             ) ||
             ( if *s > 0
                 then "$ifdef IIMAGE_DATA" || s || "\n" ||
                      "$endif # IIMAGE_DATA\n"
                 else ""
             )
           else
             [gdecl, ldecl, s]
end


#
#  Write iimages of x1,x1,...,xn.
#
procedure idump(f, x[])  #: write images of values in list x
   every write(((type(\f) == "file", f) | &errout)\1, iimage(!x))
   return x[-1] | &null
end

$define _iimage_
$endif # _iimage_
