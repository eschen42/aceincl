############################################################################
#
#   File:     fieldedDataFile.icn
#
#   Subject:  Procedures to produce logical lines or fields from formatted
#             data files
#
#   Author:   Arthur C. Eschenlauer
#
#   Date:     September 8, 2021
#
############################################################################
#
#   This file is in the public domain.
#
#   SPDX-License-Identifier: CC-PDDC
#     https://spdx.org/licenses/CC-PDDC.html
#
############################################################################
#
#   record FieldedData(lines, fields)
#     A record that holds two co-expression factories
#
#   procedure FieldedDataFactory(format, filePath) :  FieldedData
#     Returns FieldedData for file at filePath according to format;
#     formula == ( "tabular" | "ini" | stop() )
#
#   procedure tabularLines(f) : C
#     Procduce co-expression that produces logical lines of a tabular file
#     - f: test file opened for reading
#
#   procedure tabularFields(line, sep) : C
#     Procduce co-expression that produces fields from a logical line of a
#     tabular file
#     - line: logical line, s
#     - sep : (optional) separator, c; defaults to '\t'
#
#   procedure getTabular(typeName, tsvPath, colL, sep, dflt)
#     Produce L of RecTable from a tabular file
#     - typeName: the first result to be produced by RecTableType(T), s
#     - tsvPath : the path to the tabular data file, s
#     - colL    : (optional) columns to select, L of i
#     - sep     : (optional) separators, c
#     - dflt    : (optional) default value for RecTable fields, x
#
#   procedure iniLines(f) : C
#     Procduce co-expression that produces logical lines of an INI file
#
#   procedure iniFields(line) : C
#     Procduce co-expression that produces fields from a logical line
#     of an INI file
#
#   procedure getIni(ini) : T (string -> T (string -> x))
#     Produce a table of table from an INI file
#
############################################################################
$ifndef _fieldedDataFile_
$define _fieldedDataFile_

$ifndef _RecTable_
$error Must include RecTable.icn for procedure RecTableConstructorC
$endif


# FieldedData organizes functions that create co-expressions producing
#   logical lines and fields within a logical line from tabular data
record FieldedData(lines, fields) #: record holding two co-expression factories

# FieldedDataFactory produces FieldedData populated according to format;
#   as of now, only "tabular" format is supported
procedure FieldedDataFactory(format, filePath) #: produce FieldedData for format
  close(open(filePath, "r")) |
    stop("FieldedDataFactory: Cannot open file for reading: " || filePath)
  return case format of {
    # eventually add support for CSV and who knows what else
    "tabular" : FieldedData(tabularLines, tabularFields)
    "ini" : FieldedData(iniLines, iniFields)
    default : stop("FieldedDataFactory: Unknown format \"" || format || "\" for file " || filePath)
    }
end

# create co-expression that, for each activation, transmits to &source a
#   logical line of a tab-separated-values file
procedure tabularLines(f) #: factory for C producing logical lines of a tabular file
  local line
  return create
    every line := !f
      do {
        line @ &source
      }
end

# create co-expression that, for each activation, transmits to &source a
#   field from a logical line of a tab-separated-values file
procedure tabularFields(line, sep) #: factory for C producing fields from a logical line of a tabular file
  local field, source
  /sep := '\t'
  return create {
      source := &source
      line ? while ( not pos(0)
                   , field := tab(upto(sep) | 0)
                   , field @ source
                   , move(1)
                   )
      if line[-1:0] == sep
        then "" @ source
      &fail
    }
end

procedure getTabular(typeName, tsvPath, colL, sep, dflt) #: Produce L of RecTable from a tabular file
  # - typeName: the first result to be produced by RecTableType(T), s
  # - tsvPath : the path to the tabular data file, s
  # - colL    : (optional) columns to use, L of i; default: use all columns
  # - sep     : (optional) separators, c; default: '\t'
  # - dflt    : (optional) default value for RecTable fields, x
  local fieldedData # a FieldedData record having two C members: lines, fields
  local resultL     # result, L of RecTable
  local lineC       # C producing logical lines of the tabular file
  local lineL       # one result produced by lineC
  local lineFieldL  # list of fields in lineL
  local fieldC      # C producing logial fields of lineL
  local RecTableC   # L @ RecTableC produces RecTable

  local allocated
  local collections
  local regions
  local storage
  local i, gimme, f

  /sep := '\t'

  RecTableColTypeCheck(typeName, "string", "typeName")
  RecTableColTypeCheck(tsvPath,  "string", "tsvPath" )

  write("getTabular parsing ", tsvPath)
  fieldedData := FieldedDataFactory("tabular", tsvPath)
  lineC := fieldedData.lines(open(tsvPath,"r"), sep) |
    stop(&progname, ": failed to open tabular file ",tsvPath)
  resultL := []
  # Using first line, create C that will produce RecTable instances
  lineL := @lineC
  lineFieldL := []
  fieldC := fieldedData.fields(lineL)
  while put(lineFieldL, @fieldC)
  RecTableC :=
    RecTableConstructorC(
      typeName
    , lineFieldL
    , colL
    , dflt
    )
  # defining NOHACK increases:
  # - sys  time roughly 50%
  # - real time roughly 60%
  # - user time roughly 25%
  #$define NOHACK
  $ ifndef NOHACK
  f := open(tsvPath,"r") |
    stop(&progname, ": failed to open tabular file ",tsvPath)
  $endif # NOHACK
  # Using subsequent lines and RecTableC, produce RecTable instances
  $ ifdef NOHACK
  while lineL := @lineC
  $else # NOHACK not defined
  read(f)
  while lineL := read(f)
  $endif # NOHACK
    do {
      lineFieldL := []
      lineL ? every fieldC := upto(sep) | 0
            do {
              put(lineFieldL, tab(fieldC))
              pos(0) | move(1)
              }
      put(resultL, lineFieldL @ RecTableC)
    }
  if *resultL > 0
    then return resultL
end

# create co-expression that, for each activation, transmits to &source a
#   "logical line" of an INI file; note that this is in fact a list
#   whose first member is the section title (if any) and the rest of the
#   members are each key=value pair in the section.
#   Note well:
#   - Values must either be numeric or begin and end with a double quote.
#   - There is no need to escape internal double quotes.
#   - Because there are no escapes at all, values must be contained on a
#     single line.

$ifndef ini_line_default
  $define ini_line_default "default"
$endif # ini_line_default

procedure iniLines(f) #: factory for C producing logical lines of an INI file
  local line, heading, logical
  heading := ini_line_default
  logical := [ini_line_default]
  return create {
      every line := !f
        do {
          # comments must have semicolon in first column
          line ? match(";") & next
          # produce sections (logical lines) having at least one key-value-pair
          ( line ? tab(match("[")) || (heading <- tab(upto(']'))) || move(1)
          , if *logical > 1
              then ( logical @ &source
                   , logical := [heading]
                   )
              else logical := [heading]
          ) & next
          # put key value pairs (unparsed) onto list, allowing empty values
          line ? put( logical
                    , tab(upto('= \t')) || ("=" == move(1)) || (tab(0))
                    ) & next
          # non-blank lines cause abort
          line ? upto(&cset -- ' \t') & stop("iniLines: bad INI line:\n" || line)
          # blank lines should be ignored
        }
      if *logical > 1
        then logical @ &source
      &fail @ &source
    }
end

# create co-expression that, for each activation, transmits to &source a
#   key-value pair from a logical line of an INI file, producing the first
#   field as a string and the rest as [string key, string value]
procedure iniFields(line) #: factory for C producing fields from a logical line of an INI file
  local kvp_key, kvp_value, kvp, section
  return create {
      (section := get(line)) @ &source
      while kvp := get(line) do kvp ? {
        if (kvp_key := tab(upto('='))) || move(1) ||
            (      ="\"" || (kvp_value := tab(-1)) || "\"" | # match string
                     (kvp_value := numeric(tab(0)))          # match numeric
            )
          then [kvp_key, kvp_value] @ &source
          else stop("iniFields: bad key-value pair in section [" ||
                      section || "]: " || kvp)
      }
    }
end

$ifndef tbl_ini_default
  $define tbl_ini_default "default"
$endif

procedure getIni(ini) #: parse an INI file into a table of table
  # ini             # the path to the INI named after the &progname
  local f           # the file returned by open(ini)
  local l           # a line from f
  local tbl_ini     # the table-of-tables holding the parsed INI, maping
                    #   section names to tables of key-value pairs
  local section_ce  # co-expression producing logical lines from f
  local line        # logical line produced by section_ce
  local kvp_ce      # coexpression producing fields from line
  local section     # first member of logical line
  local kvp         # key-value pair from non-first members of logical line
  local fieldedData # a FieldedData record having two members:
  #       lines  - co-expression producing logical lines from source data file
  #       fields - co-expression producing fields from source data file lines

  tbl_ini := table()
  tbl_ini[tbl_ini_default] := table()
  fieldedData := FieldedDataFactory("ini", ini)
  if f := open(ini, "r") | stop("getIni: failed to open file " || ini)
    then {
      section_ce := fieldedData.lines(f)
      while line := @section_ce do {
        $ifdef DEBUG_getIni
          write("*line = ", *line)
        $endif
        kvp_ce := fieldedData.fields(line)
        tbl_ini[@kvp_ce] := section := table()
        while kvp := @kvp_ce do section[kvp[1]] := kvp[2]
      }
  }
  close(f)

$ifdef DEBUG_getIni
  write("*tbl_ini = ", *tbl_ini)
  every f := key(tbl_ini)
    do write("*tbl_ini[", f, "] = ", *(tbl_ini[f]))
  write(xencode(tbl_ini,StringFile(""),WriteString).s)
$endif
  return tbl_ini
end

$endif # _fieldedDataFile_
