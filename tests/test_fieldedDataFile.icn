# assume that LPATH includes ..

$include "fieldedDataFile.icn"
$include "wora.icn"
$include "fileDirIo.icn"
$include "vnom.icn"
$define prog_dir_path prog_path_parts() || path_separator()

link ximage
global g_Cerror

procedure main()
  local fieldedData, f_ce, l, l1, colHeader, col, l_ce, ini
  local f, filePath, ion_count, val, i, s
  @(g_Cerror := create stop(ximage(@&source)))

  # exercise procedure getIni
  ini := prog_dir_path || "test_fieldedDataFile.ini"
  ini := getIni(ini) | stop(&progname, ": failed to open INI")
  write(ximage(ini))

  # get FieldedData(lines, fields) record with procedures returning
  #   co-expression_count for reading logical lines and fields within a
  #   logical line, respectively
  filePath := prog_dir_path || ini["univariate", "file_name"]
  fieldedData := FieldedDataFactory("tabular", filePath)
  f := open(filePath, "r") | stop(&progname, ": failed to open file " || filePath)

  # Create co-expression to produce "lines" of `f`;
  #   this is trivial for tabular data (compared to a CSV
  #   that can split logical lines across physical lines).
  f_ce := fieldedData.lines(f)

  # read the header line
  l1 := @f_ce | stop(&progname, ": failed read first line of file " || filePath)
  colHeader := table()
  col := 0
  # read the column names ("headers") out of the fields
  l_ce := fieldedData.fields(l1)
  while val := @l_ce do (
  , col +:= 1
  , writes(if col ~=1 then "\t" else "", val)
  )
  write()
  if col ~= ini["univariate", "column_count"]
    then stop(": tabular file header has unexpected number of column")
  ion_count := 0
  while l :=  @f_ce do {
    ion_count +:= 1
    col := 0
    # extract values from columns
    l_ce := fieldedData.fields(l)
    while val := @l_ce do (
    , col +:= 1
    , writes(if col ~=1 then "\t" else "", val)
    )
    write()
    if ini["univariate", "column_count"] ~= col
      then stop("unexpected number of columns from tabular data file")
  }
  close(f)
  if ini["univariate", "ion_count"] ~= ion_count
    then stop("unexpected number of lines from tabular data file")
  l := getTabular("testRecTable", "test_fieldedDataFile.tab")
  i := 0
  while l1 := pop(l)
    do {
      write("from getTabular(\"testRecTable\", \"test_fieldedDataFile.tab\"): List member ", i +:= 1)
      every write("  ", vmsg(l1, "strings"))
      }
  every s := !["test_fieldedDataFile_01.csv", "test_fieldedDataFile_02.csv"]
    do {
      l := getCSV("testRecTable", s)
      i := 0
      while l1 := pop(l)
        do {
          write("from getCSV(\"testRecTable\", \"",
            s, "\"): List member ", i +:= 1)
          every write("  ", vmsg(l1, "strings"))
          }
      }
end
