$ifndef _wora_
$define _wora_
############################################################################
#
#   File:     wora.icn
#
#   Subject:  Restricted-access globally accessible storage.
#
#   Author:   Arthur C. Eschenlauer
#
#   Date:     September 30, 2021
#
############################################################################
#
#   This file is in the public domain. Art Eschenlauer has waived all
#   copyright and related or neighboring rights to:
#     wora.icn - Restricted-access globally accessible storage
#   For details, see:
#     https://creativecommons.org/publicdomain/zero/1.0/
#
#   If you require a specific license and public domain status is not
#   sufficient for your needs, please substitute the MIT license (see
#   below), bearing in mind that the copyright "claim" is solely to meet
#   your requirements and does not imply any restriction on use or copying
#   by the author:
#
#     Copyright (c) 2022, Arthur Eschenlauer
#    
#     Permission is hereby granted, free of charge, to any person obtain-
#     ing a copy of this software and associated documentation files (the
#     "Software"), to deal in the Software without restriction, including
#     without limitation the rights to use, copy, modify, merge, publish,
#     distribute, sublicense, and/or sell copies of the Software, and to
#     permit persons to whom the Software is furnished to do so, subject
#     to the following conditions:
#    
#     The above copyright notice and this permission notice shall be
#     included in all copies or substantial portions of the Software.
#    
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#     NON-INFRINGEMENT.
#    
#     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
#     ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
#     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#     WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
############################################################################
#
#   procedure wora(id,del)
#     Set a globally visible value only resettable by the C that created it.
#     `id` - identifies the WORA.
#     `del` - not null when owner requests deletion; ignored otherwise.
#
############################################################################

procedure wora(id,del) #: a globally visible value, settable by only one C
  # WORA - Writeable-by-One, Readable-by-All
  #   An implementation of the publisher-subscriber pattern such that a
  #   variable is read-only outside of the C (co-expression) that originally
  #   sets it.
  local owner
  static s_ownerT, s_valueT
  initial {
    s_ownerT := table()
    s_valueT := table()
  }
  if /id then fail
  owner := \s_ownerT[id]
  if /owner then {
    # WORA is settable
    s_ownerT[id] := &current
    suspend s_valueT[id]
  } else if owner === &current then {
    # WORA is resettable by owner
    if \del
      then return (
             delete(s_ownerT,id)
           , delete(s_valueT,id)
           , &null
           )
    suspend s_valueT[id]
  } else {
    # produce an unassignable copy of WORA
    suspend .(s_valueT[id])
  }
end

$endif # _wora_
