############################################################################
#
#   File:     selectRecordFromListByField.icn
#
#   Subject:  Produce records (or tables) from a list where a test
#             co-expression produces a value when transmitted the value
#             of the specified field for the list-members to be selected.
#
#   Author:   Arthur C. Eschenlauer
#
#   Date:     September 8, 2021
#
############################################################################
#
#   This file is in the public domain.
#
#   SPDX-License-Identifier: CC-PDDC
#     https://spdx.org/licenses/CC-PDDC.html
#
############################################################################
#
#   selectRecordFromListByField(Lfrom, sField, Ctest) : X1, X2, ...
#   - Generate elements of Lfrom where contents of sField match criteria
#     evaluated by Ctest, i.e., Ctest produces a value when contents are
#     transmitted to it.
#   - Lfrom is a list of records (or tables) having a field (or key) match-
#     ing sField
#   - `Lfrom[sFeld] @ Ctest` succeeds when a list member should be
#     generated.
#
#   For example:
#
#     # record ion(name, polarity)
#     demo := [
#       ion("one", "P")
#     , ion("two", "P")
#     , ion("three", "N")
#     , ion("four", "P")
#     , ion("five", "N")
#     ]
#     # partition the ions by polarity
#     rslt := table()
#     every pol := ("P" | "N")
#       do {
#         Lrslt := rslt[pol] := []
#         # capture pol for comparison
#         Cselect := create pol == \@&source
#         # produce records where "polarity" field == pol
#         every put(Lrslt,
#             selectRecordFromListByField(demo, "polarity", Cselect)
#           )
#       }
#     # at this point:
#     # - rslt["P"] has ions one, two, and four
#     # - rslt["N"] has ions three and five
#     every pol := ("P" | "N")
#       do {
#         write("Polarity: ", pol)
#         every R := !rslt[pol]
#           do write("ion: ", R.name, ", polarity: ", R.polarity)
#       }
#    
############################################################################
$ifndef _selectRecordFromListByField_

procedure selectRecordFromListByField(Lfrom, sField, Ctest) #: produce matching records (or tables)
  # Lfrom   - a list of either:
  #           - records having a field named "sField"
  #           - tables having a key named "sField"
  # sField  - either:
  #           - the name of a field in each record in the list
  #           - the name of a key in each table in the list
  # Ctest   - a co-expression that succeeds when a value that is
  #           transmitted to it meets the required criteria
  local currentRecord
  every currentRecord := !Lfrom do {
    Ctest := ^Ctest
    @Ctest
    if currentRecord[sField] @ Ctest
      then suspend currentRecord
  }
  fail
end

#$define ACEINCL_TEST
$ifdef ACEINCL_TEST

record ion(name, polarity)

procedure main()

  local demo, rslt, pol, Lrslt, Cselect, R
  # record ion(name, polarity)
  demo := [
    ion("one", "P")
  , ion("two", "P")
  , ion("three", "N")
  , ion("four", "P")
  , ion("five", "N")
  ]
  # partition the ions by polarity
  rslt := table()
  every pol := ("P" | "N")
    do {
      Lrslt := rslt[pol] := []
      # capture pol for comparison
      Cselect := create pol == \@&source
      # produce records where "polarity" field == pol
      every put(Lrslt,
          selectRecordFromListByField(demo, "polarity", Cselect)
        )
    }
  # at this point:
  # - rslt("P") has ions one, two, and four
  # - rslt("N") has ions three and five

  every pol := ("P" | "N")
    do {
      write("Polarity: ", pol)
      every R := !rslt[pol]
        do write("ion: ", R.name, ", polarity: ", R.polarity)
    }
end

$endif # ACEINCL_TEST

$define _selectRecordFromListByField_
$endif # _selectRecordFromListByField_
